What happens when you initialize a repository? Why do you need to do it?

	When you initialize a repository it creates a .git repository which 
	will track version changes. If the it's not initialized your project
	changes don't get tracked.

How is the staging area different from the working directory and the repository?
What value do you think it offers?
	
	The staging area connects the working area and repository by acting as a m-
	iddle ground between the two. The staging area lists the files you wish to
	make commits for into the repository. The working area is the directory in 
	which you are working at that particular time.
	
	The value it offers lies in not having to commit all changes at once, or f-
	iles which are not having any changes being made to them. This way you can 
	see the specific files that were changed for a given commit at the log.

How can you use the staging area to make sure you have one commit per logical
change?
	
	The staging area allows you to add each file related to a logical change 
	one by one. It allws you to break your work flow into logical change chunks
	which make sense for the project. By adding a file to the staging area each
	time you make a change to it related to a particular change overall you are
	encouraging yourself to keep your workflow in useful chunks rather than ha-
	ving a huge change each time.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
	
	Branches may be useful for creating versions with experimental features. P-
	rojects with new behaviours compared to previous versions. Or in switching 
	to new processes or scopes.

How do the diagrams help you visualize the branch structure?

	Diagrams show the branch history and which commits are reachable. Shows po-
	ints at which the project was branched into new features, fixes, or others.
	
What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

	The merged branch will contain code from both branches based on the original
	branch which grandparented both of them. We represent them in the diagram as
	so to show what commits are reachable.

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?

	Auto merge -
		Pro
			Git takes care of majority of conflicts by looking back to older files
			and doing a comparison of the files. This will quickly merge projects
			so that you don't have to go through them line by line.
			
		Con
			Auto merging can't do all conflicts as there are so many ways two files
			can conflict. Leaving you with a list of items to resolve. However they
			are well marked out for ease of resolving.
	Manual merge -
		Pro
			Fine control over the various parts of the project, allowing you to keep
			only the most relevant or useful material.
		Con
			Takes time and energy